<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	   xsi:schemaLocation="
		http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
		http://www.springframework.org/schema/aop
		http://www.springframework.org/schema/aop/spring-aop-3.2.xsd">

	<!--<bean id="propertyConfigurer"-->
		  <!--class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">-->
		<!--<property name="location" value="classpath:mq_config.properties" />-->
	<!--</bean>-->
	<!-- 真正可以产生Connection的ConnectionFactory，由对应的 JMS服务厂商提供 -->
	<bean id="targetConnectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory">
		<!-- ActiveMQ服务地址 -->
		<property name="brokerURL" value="${mq.brokerURL}" />
		<property name="userName" value="${mq.userName}"></property>
		<property name="password" value="${mq.password}"></property>
	</bean>

	<!-- ActiveMQ为我们提供了一个PooledConnectionFactory，通过往里面注入一个ActiveMQConnectionFactory
        可以用来将Connection、Session和MessageProducer池化，这样可以大大的减少我们的资源消耗。
        要依赖于 activemq-pool包
     -->
	<bean id="pooledConnectionFactory" class="org.apache.activemq.pool.PooledConnectionFactory">
		<property name="connectionFactory" ref="targetConnectionFactory" />
		<property name="maxConnections" value="10" />
	</bean>

	<!-- Spring用于管理真正的ConnectionFactory的ConnectionFactory -->
	<bean id="connectionFactory" class="org.springframework.jms.connection.SingleConnectionFactory">
		<!-- 目标ConnectionFactory对应真实的可以产生JMS Connection的ConnectionFactory -->
		<property name="targetConnectionFactory" ref="pooledConnectionFactory" />
	</bean>

	<bean id="consumerMessageListener" class="com.cq.mq.listener.ConsumerMessageListener" />
	
     <bean id="queueDestination" class="org.apache.activemq.command.ActiveMQQueue">
        <constructor-arg>
            <value>${QueueName.mqTest}</value>
        </constructor-arg>
    </bean>
    <!-- 队列消息监听容器 -->
    <bean id="jmsContainer" class="org.springframework.jms.listener.DefaultMessageListenerContainer">
        <property name="connectionFactory" ref="connectionFactory" />
        <property name="destination" ref="queueDestination" />
        <property name="messageListener" ref="consumerMessageListener" />
    </bean>
    
    <!-- 主题目的地 -->
    <bean id="topicDestination" class="org.apache.activemq.command.ActiveMQTopic">
        <constructor-arg>
            <value>${Topic.mqTest}</value>
        </constructor-arg>
    </bean>
    <!-- 主题监听类 -->
    <bean id="consumerTopicMessageListener" class="com.cq.mq.listener.ConsumerTopicMessageListener"></bean>
    <!-- 主题监听容器 -->
    <bean id="topicContainer" class="org.springframework.jms.listener.DefaultMessageListenerContainer">
         <property name="connectionFactory" ref="connectionFactory" />
         <property name="destination" ref="topicDestination" />
         <property name="messageListener" ref="consumerTopicMessageListener" />
    </bean>
    
    <!-- 主题监听类2 -->
    <bean id="consumerTopicMessageListener2" class="com.cq.mq.listener.ConsumerTopicMessageListener2"></bean>
    <!-- 主题监听容器2 -->
    <bean id="topicContainer2" class="org.springframework.jms.listener.DefaultMessageListenerContainer">
         <property name="connectionFactory" ref="connectionFactory" />
         <property name="destination" ref="topicDestination" />
         <property name="messageListener" ref="consumerTopicMessageListener2" />
    </bean>
</beans>